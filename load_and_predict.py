#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Tue Feb 12 16:07:09 2019

@author: Tom
"""

from keras.models import load_model
import keras.backend as K
import datetime
import numpy as np
import h5py

def dice_coef(y_true, y_pred, smooth = 1.0):
    """Compute Dice Similarity Coefficient (DSC)
        
        Parameters
        ----------
        y_true : 1D numpy array of float32
        Array of correct/ground truth labels
        y_pred : 1D numpy array of predictions
        Array of predicted labels generated by CNN
        smooth : float
        Defaults to 1.0
        
        Returns
        -------
        Returns the DSC
        
        Additional Notes
        -------
        Original source code can be found `here <https://github.com/jocicmarko/ultrasound-nerve-segmentation/blob/master/train.py>`_
        """
    flat_truth = K.flatten(y_true)
    flat_prediction = K.flatten(y_pred)
    intersection = K.sum(flat_truth * flat_prediction)
    numerator = 2 * intersection + smooth
    sum_truth = K.sum(flat_truth)
    sum_prediction = K.sum(flat_prediction)
    denominator = sum_truth + sum_prediction + smooth
    dice = numerator / denominator
    return dice

def dice_coef_loss(y_true, y_pred):
    """Dice Similarity Coefficient (DSC) loss function
    
    Parameters
    ----------
    y_true : 1D numpy array of float32
    Array of correct/ground truth labels
    y_pred : 1D numpy array of predictions
    Array of predicted labels generated by FCN
    
    Returns
    -------
    Returns the DSC loss
    
    """
    return -dice_coef(y_true, y_pred)

def load_and_predict(FCNModelPath, testingHDF5, predFileName):
    """Load FCN model and predict on a dataset
    
    Parameters
    ----------
    FCNModelPath : string - filepath to saved FCN model
    testingHDF5 : string - filepath to dataset
    predFileName: string - HDf5 file to which predictions will be saved
    
    Returns
    -------
    Returns nothing but saves predictions as HDF5 file
    
    """
    loaded_model = load_model(FCNModelPath, custom_objects={'dice_coef': dice_coef,'dice_coef_loss': dice_coef_loss})
    with h5py.File(testingHDF5, 'r') as f:
        X_test = f['testing_Images'][()]
        test_imag_fileanmes = f['testing_image_filenames'][()]
    
    uh_preds = loaded_model.predict(X_test, verbose=1)
    uh_preds_np = np.array(uh_preds)
    print("Shape of UH predictions: " + str(uh_preds_np.shape))

    hd5f_file = h5py.File(datetime.datetime.today().strftime('%Y-%m-%d')+' ' + predFileName, mode='w')
    hd5f_file.create_dataset('UH_Predictions', data = uh_preds_np)
    hd5f_file.create_dataset('Prediction_Names', data = test_imag_fileanmes)
    hd5f_file.close()
    

#excluded_subgroups = ["coronal","dark lumen", "low quality"]
#model_path = "/Volumes/GoogleDrive/My Drive/tom/Rectal Segmentation/Data-MultipleExperts/Outer Rectal Wall U-Net/Analysis/2021-06-06/Training_Rectal_Wall_Unet.hdf5"
#for i in excluded_subgroups:
#       hdf5_path = '/Volumes/GoogleDrive/My Drive/tom/Rectal Segmentation/Data-MultipleExperts/Excluded Patients/Datasets/ORW_Testing_Dataset_excluded_' + i + '.hdf5'
#       pred_name = "ORW_Preds_Excluded_" + i + ".hdf5"
#       load_and_predict(model_path, hdf5_path, pred_name) 
#model_path = '/Volumes/GoogleDrive/My Drive/tom/Rectal Segmentation/Data-MultipleExperts/Outer Rectal Wall U-Net/Analysis/2021-04-22/Training_Rectal_Wall_Unet.hdf5'
#hdf5_path = '/Volumes/GoogleDrive/My Drive/tom/Rectal Segmentation/Data-MultipleExperts/Excluded Patients/Datasets/ORW_Testing_Dataset_excluded_masks.hdf5'
#pred_name = 'ORW_Preds_Excluded_Masks.hdf5'
#load_and_predict(model_path, hdf5_path, pred_name)  
#
#
#model_path = '/Volumes/GoogleDrive/My Drive/tom/Rectal Segmentation/Data-MultipleExperts/Outer Rectal Wall U-Net/Analysis/2021-04-22/Training_Rectal_Wall_Unet.hdf5'
#hdf5_path = '/Volumes/GoogleDrive/My Drive/tom/Rectal Segmentation/Data-MultipleExperts/VA_Patients/Datasets/ORW_Testing_Dataset_VA.hdf5'
#pred_name = 'ORW_Preds_VA.hdf5'
#load_and_predict(model_path, hdf5_path, pred_name)